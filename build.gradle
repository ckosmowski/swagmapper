plugins {
    id 'java'
    id 'maven-publish'
    id 'signing'
    id 'de.marcphilipp.nexus-publish' version '0.3.1'
    id 'io.codearte.nexus-staging' version '0.21.0'
}

group 'de.cakedown'
version '1.0-SNAPSHOT'

sourceCompatibility = 1.8

repositories {
    mavenCentral()
}

nexusStaging {
    packageGroup = "de.cakedown"
    stagingRepositoryId = "decakedown-manual"
    username = System.getenv('SONATYPE_USERNAME')
    password = System.getenv('SONATYPE_PASSWORD')
}


dependencies {
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.3.1'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.3.1'
    testCompile group: 'org.hamcrest', name: 'hamcrest-junit', version: '2.0.0.0'
    // https://mvnrepository.com/artifact/org.apache.commons/commons-lang3
    compile group: 'org.apache.commons', name: 'commons-lang3', version: '3.9'
    compile group: 'commons-beanutils', name: 'commons-beanutils', version: '1.9.4'
    compile group: 'org.slf4j', name: 'slf4j-api', version: '1.7.28'
    compile group: 'ch.qos.logback', name: 'logback-classic', version: '1.2.3'
}

task javadocJar(type: Jar) {
    classifier = 'javadoc'
    from javadoc
}
task sourcesJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.allSource
}
artifacts {
    archives javadocJar, sourcesJar
}

publishing {
    publications {
        maven(MavenPublication) {
            groupId = group
            artifactId = "swagmapper"
            version = version
            from components.java
        }
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            pom {
                name = project_name
                description = project_description
                url = project_url
                properties = [
                        myProp: "value",
                        "prop.with.dots": "anotherValue"
                ]
                licenses {
                    license {
                        name = project_license_slug
                        url = project_license_url
                    }
                }
                developers {
                    developer {
                        id = project_developer
                        name = project_developer
                    }
                }
                scm {
                    connection = project_scm
                    developerConnection = project_scm
                    url = project_url
                }
            }
        }
    }
}

nexusPublishing {
    repositories {
        sonatype  {
            username = System.getenv('SONATYPE_USERNAME') // defaults to project.properties["myNexusUsername"]
            password = System.getenv('SONATYPE_PASSWORD') // defaults to project.properties["myNexusPassword"]
        }
    }
}

/*uploadArchives {
    repositories {
        mavenDeployer {
            beforeDeployment {
                    MavenDeployment deployment -> signing.signPom(deployment)
            }
            repository(url: maven2_url) { 
                authentication(userName: System.getenv('SONATYPE_USERNAME'), password: System.getenv('SONATYPE_PASSWORD'))
            }
            snapshotRepository(url: snapshot_url) {
                authentication(userName: System.getenv('SONATYPE_USERNAME'), password: System.getenv('SONATYPE_PASSWORD'))
            }
            pom.project {
                name project_name
                packaging 'jar'
                description project_description
                url project_url
                scm {
                    connection project_scm
                    developerConnection project_scm
                    url project_url
                }
                licenses {
                    license {
                        name project_license_slug
                        url project_license_url
                    }
                }
                developers {
                    developer {
                        id project_developer
                        name project_developer
                    }
                }
            }
        }
    }
}*/

import org.gradle.plugins.signing.Sign
gradle.taskGraph.whenReady { taskGraph ->
    if (taskGraph.allTasks.any { it instanceof Sign }) {
        allprojects { ext."signing.keyId" = System.getenv('GPG_KEY_ID') }
        allprojects { ext."signing.secretKeyRingFile" = System.getenv('GPG_KEY_LOCATION') }
        allprojects { ext."signing.password" = System.getenv('GPG_PASSPHRASE') }
    }
    // Do not sign archives by default (a local build without gpg keyring should succeed)
    if (taskGraph.allTasks.any { it.name == 'build' || it.name == 'assemble' }) {
        tasks.findAll { it.name == 'signArchives' || it.name == 'signDocsJar' || it.name == 'signTestJar' }.each { task ->
            task.enabled = false
        }
    }
}
signing
        {
            sign configurations.archives
        }
build.dependsOn.remove(signArchives)
